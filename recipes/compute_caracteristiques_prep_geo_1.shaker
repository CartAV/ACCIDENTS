{
  "tags": [],
  "columnsSelection": {
    "mode": "ALL"
  },
  "analysisColumnData": {},
  "vizSampling": {
    "_refreshTrigger": 0,
    "autoRefreshSample": false
  },
  "origin": "PREPARE_RECIPE",
  "steps": [
    {
      "alwaysShowComment": false,
      "preview": false,
      "name": "Invalider gécodages hors département",
      "steps": [
        {
          "alwaysShowComment": false,
          "preview": false,
          "params": {
            "usePythonUnicode": true,
            "stopOnError": true,
            "column": "bano_score",
            "pythonSourceCode": "def process(row):\n    if row[\"bano_postcode\"] and row[\"bano_postcode\"][0:2] !\u003d row[\"original_city_code\"][0:2]:\n        return 0.0\n    else:\n        return row[\"bano_score\"]\n",
            "mode": "CELL"
          },
          "type": "PythonUDF",
          "disabled": false,
          "metaType": "PROCESSOR"
        },
        {
          "alwaysShowComment": false,
          "preview": false,
          "params": {
            "usePythonUnicode": true,
            "stopOnError": true,
            "column": "ban2_score",
            "pythonSourceCode": "def process(row):\n    if row[\"ban2_score\"] and row[\"ban2_citycode\"][0:2] !\u003d row[\"original_city_code\"][0:2]:\n        return 0.0\n    else:\n        return row[\"ban2_score\"]\n",
            "mode": "CELL"
          },
          "type": "PythonUDF",
          "disabled": false,
          "metaType": "PROCESSOR"
        }
      ],
      "disabled": false,
      "metaType": "GROUP"
    },
    {
      "alwaysShowComment": false,
      "preview": false,
      "params": {
        "usePythonUnicode": false,
        "stopOnError": true,
        "pythonSourceCode": "# Score minimal pour être pris en compte\nmin_score \u003d 0.5\n\ndef process(row):\n    if row[\"ban_score\"]:\n        ban_score \u003d float(row[\"ban_score\"])\n    else:\n        ban_score \u003d None\n    if row[\"bano_score\"]:\n        bano_score \u003d float(row[\"bano_score\"])\n    else:\n        bano_score \u003d None     \n    if row[\"ban2_score\"]:\n        ban2_score \u003d float(row[\"ban2_score\"])\n    else:\n        ban2_score \u003d None\n    \n    # Si on a des coordonnées saisies dès la BAAC\n    if row[\"long\"] and row[\"lat\"]:\n        # Si le score est bon, et qu’il s’agit d’un pas de porte,\n        # On préfère le résultat de la BAN\n        if ban_score \u003e 0.6 and row[\"ban_type\"] \u003d\u003d \"housenumber\":\n            row[\"longitude\"] \u003d row[\"ban_longitude\"]\n            row[\"latitude\"] \u003d row[\"ban_latitude\"]\n            row[\"geo_source\"] \u003d \"ban + citycode\"\n            row[\"geo_type\"] \u003d row[\"ban_type\"]\n            row[\"geo_score\"] \u003d row[\"ban_score\"]\n        # Sinon on préfère les coordonnées saisies\n        else:\n            row[\"longitude\"] \u003d row[\"long\"]\n            row[\"latitude\"] \u003d row[\"lat\"]\n            row[\"geo_source\"] \u003d \"baac\"\n            row[\"geo_type\"] \u003d \"unknown\"\n    \n    # Pas de géocodage saisi dans la baac\n    elif max(ban_score, bano_score, ban2_score) \u003e\u003d min_score:\n        # On récupère simplement celui qui a le plus gros score\n        if ban_score \u003e\u003d bano_score and ban_score \u003e\u003d ban2_score:\n            row[\"longitude\"] \u003d row[\"ban_longitude\"]\n            row[\"latitude\"] \u003d row[\"ban_latitude\"]\n            row[\"geo_source\"] \u003d \"ban + citycode\"\n            row[\"geo_type\"] \u003d row[\"ban_type\"]\n            row[\"geo_score\"] \u003d row[\"ban_score\"]\n        elif bano_score \u003e ban_score and bano_score \u003e ban2_score:\n            row[\"longitude\"] \u003d row[\"bano_longitude\"]\n            row[\"latitude\"] \u003d row[\"bano_latitude\"]\n            row[\"geo_source\"] \u003d \"bano + name\"\n            row[\"geo_type\"] \u003d row[\"bano_type\"]\n            row[\"geo_score\"] \u003d row[\"bano_score\"]\n        elif ban2_score \u003e ban_score and ban2_score \u003e bano_score:\n            row[\"longitude\"] \u003d row[\"ban2_longitude\"]\n            row[\"latitude\"] \u003d row[\"ban2_latitude\"]\n            row[\"geo_source\"] \u003d \"ban + name\"\n            row[\"geo_type\"] \u003d row[\"ban2_type\"]\n            row[\"geo_score\"] \u003d row[\"ban2_score\"]\n        \n    return row\n",
        "mode": "ROW"
      },
      "type": "PythonUDF",
      "disabled": false,
      "metaType": "PROCESSOR"
    },
    {
      "alwaysShowComment": false,
      "preview": false,
      "name": "Coordonnées \u0026 distances",
      "steps": [
        {
          "alwaysShowComment": false,
          "preview": false,
          "params": {
            "out_column": "baac_geopoint",
            "lon_column": "long",
            "lat_column": "lat"
          },
          "type": "GeoPointCreator",
          "disabled": false,
          "metaType": "PROCESSOR"
        },
        {
          "alwaysShowComment": false,
          "preview": false,
          "params": {
            "out_column": "geopoint",
            "lon_column": "longitude",
            "lat_column": "latitude"
          },
          "type": "GeoPointCreator",
          "disabled": false,
          "metaType": "PROCESSOR"
        },
        {
          "alwaysShowComment": false,
          "preview": false,
          "params": {
            "out_column": "bano_geopoint",
            "lon_column": "bano_longitude",
            "lat_column": "bano_latitude"
          },
          "type": "GeoPointCreator",
          "disabled": false,
          "metaType": "PROCESSOR"
        },
        {
          "alwaysShowComment": false,
          "preview": false,
          "params": {
            "out_column": "ban_geopoint",
            "lon_column": "ban_longitude",
            "lat_column": "ban_latitude"
          },
          "type": "GeoPointCreator",
          "disabled": false,
          "metaType": "PROCESSOR"
        },
        {
          "alwaysShowComment": false,
          "preview": false,
          "params": {
            "out_column": "ban2_geopoint",
            "lon_column": "ban2_longitude",
            "lat_column": "ban2_latitude"
          },
          "type": "GeoPointCreator",
          "disabled": false,
          "metaType": "PROCESSOR"
        },
        {
          "alwaysShowComment": false,
          "preview": false,
          "params": {
            "input2": "ban_geopoint",
            "outputUnit": "KILOMETERS",
            "compareTo": "COLUMN",
            "output": "distance_baac_ban",
            "input1": "baac_geopoint"
          },
          "type": "GeoDistanceProcessor",
          "disabled": false,
          "metaType": "PROCESSOR"
        },
        {
          "alwaysShowComment": false,
          "preview": false,
          "params": {
            "input2": "bano_geopoint",
            "outputUnit": "KILOMETERS",
            "compareTo": "COLUMN",
            "output": "distance_baac_bano",
            "input1": "baac_geopoint"
          },
          "type": "GeoDistanceProcessor",
          "disabled": false,
          "metaType": "PROCESSOR"
        },
        {
          "alwaysShowComment": false,
          "preview": false,
          "params": {
            "input2": "bano_geopoint",
            "outputUnit": "KILOMETERS",
            "compareTo": "COLUMN",
            "output": "distance_ban_bano",
            "input1": "ban_geopoint"
          },
          "type": "GeoDistanceProcessor",
          "disabled": false,
          "metaType": "PROCESSOR"
        },
        {
          "alwaysShowComment": false,
          "preview": false,
          "params": {
            "input2": "geopoint",
            "outputUnit": "KILOMETERS",
            "compareTo": "COLUMN",
            "output": "distance_baac_final",
            "input1": "baac_geopoint"
          },
          "type": "GeoDistanceProcessor",
          "disabled": false,
          "metaType": "PROCESSOR"
        }
      ],
      "disabled": false,
      "metaType": "GROUP"
    },
    {
      "alwaysShowComment": false,
      "preview": false,
      "params": {
        "expression": "if(distance_baac_final \u003d\u003d \u0027NaN\u0027, 0.0, distance_baac_final)",
        "column": "distance_baac_final"
      },
      "type": "CreateColumnWithGREL",
      "disabled": false,
      "metaType": "PROCESSOR"
    },
    {
      "alwaysShowComment": false,
      "preview": false,
      "name": "Préparation Analyse",
      "steps": [
        {
          "alwaysShowComment": false,
          "preview": false,
          "params": {
            "outYearColumn": "ANNEE",
            "outDayOfWeekColumn": "LIBELLE_JOUR",
            "outHourColumn": "HEURE",
            "column": "date",
            "timezone_id": "UTC",
            "outMonthColumn": "",
            "outWeekOfYearColumn": "SEMAINE"
          },
          "type": "DateComponentsExtractor",
          "disabled": false,
          "metaType": "PROCESSOR"
        },
        {
          "alwaysShowComment": false,
          "preview": false,
          "params": {
            "matching": "SUBSTRING",
            "stopAfterFirstMatch": false,
            "appliesTo": "SINGLE_COLUMN",
            "normalization": "EXACT",
            "columns": [
              "LIBELLE_JOUR"
            ],
            "mapping": [
              {
                "to": "LUNDI",
                "from": "1"
              },
              {
                "to": "MARDI",
                "from": "2"
              },
              {
                "to": "MERCREDI",
                "from": "3"
              },
              {
                "to": "JEUDI",
                "from": "4"
              },
              {
                "to": "VENDREDI",
                "from": "5"
              },
              {
                "to": "SAMEDI",
                "from": "6"
              },
              {
                "to": "DIMANCHE",
                "from": "7"
              }
            ],
            "output": ""
          },
          "type": "FindReplace",
          "disabled": false,
          "metaType": "PROCESSOR"
        }
      ],
      "disabled": false,
      "metaType": "GROUP"
    },
    {
      "alwaysShowComment": false,
      "preview": false,
      "params": {
        "appliesTo": "COLUMNS",
        "columns": [
          "baac_geopoint",
          "distance_baac_final",
          "bano_geopoint",
          "distance_ban_bano",
          "distance_baac_bano",
          "ban_geopoint",
          "distance_baac_ban",
          "ban2_geopoint",
          "ban_citycode",
          "ban_label",
          "ban_latitude",
          "ban_longitude",
          "ban_postcode",
          "ban_score",
          "ban_type",
          "bano_citycode",
          "bano_label",
          "bano_latitude",
          "bano_longitude",
          "bano_postcode",
          "bano_score",
          "bano_type",
          "ban2_citycode",
          "ban2_label",
          "ban2_latitude",
          "ban2_longitude",
          "ban2_score",
          "ban2_type",
          "long",
          "com",
          "lat",
          "gps",
          "hrmn",
          "jour",
          "an"
        ],
        "keep": false
      },
      "type": "ColumnsSelector",
      "disabled": true,
      "metaType": "PROCESSOR"
    },
    {
      "alwaysShowComment": false,
      "preview": false,
      "params": {
        "outCol": "heures_minutes",
        "inCol": "date",
        "timezone_id": "UTC",
        "format": "HH:mm",
        "lang": "auto"
      },
      "type": "DateFormatter",
      "disabled": false,
      "metaType": "PROCESSOR"
    },
    {
      "alwaysShowComment": false,
      "preview": false,
      "params": {
        "outCol": "date_formated",
        "inCol": "date",
        "timezone_id": "UTC",
        "format": "dd/MM/yyyy",
        "lang": "auto"
      },
      "type": "DateFormatter",
      "disabled": false,
      "metaType": "PROCESSOR"
    }
  ],
  "exploreUIParams": {
    "autoRefresh": true
  },
  "explorationFilters": [
    {
      "$$hashKey": "0RO",
      "type": "global_search"
    }
  ],
  "charts": [],
  "globalSearchQuery": "",
  "coloring": {
    "individualColumns": [],
    "scheme": "MEANING_AND_STATUS",
    "valueColoringMode": "HASH"
  },
  "previewMode": "ALL_ROWS",
  "chartsEngine": "LINO",
  "explorationSampling": {
    "_refreshTrigger": 0,
    "autoRefreshSample": false,
    "selection": {
      "targetRatio": 0.02,
      "maxRecords": 10000,
      "partitionSelectionMethod": "ALL",
      "samplingMethod": "HEAD_SEQUENTIAL"
    }
  }
}